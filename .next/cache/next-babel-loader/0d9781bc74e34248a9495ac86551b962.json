{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DanLo\\\\WebstormProjects\\\\TrumpTwitter\\\\pages\\\\candidate.js\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport React from \"react\";\nimport Divider from '@material-ui/core/Divider';\nimport Header from \"../components/header\";\n\nCandidate.getInitialProps = async ({\n  req,\n  query\n}) => {\n  const pageRequest = `${\"http:\"}//${\"localhost:3000\"}/api/tweets?id=${query.id}`;\n  const res = await fetch(pageRequest);\n  const json = await res.json();\n  console.log(json);\n  return {\n    name: query.title,\n    data: json\n  };\n};\n\nexport default function Candidate(ctx) {\n  return __jsx(React.Fragment, null, __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \" Political Tweeter Prototype V1! \"), __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \" Tweets from \", ctx.name, \"  \"), ctx.data.candidates_info.map(post => __jsx(\"li\", {\n    key: post.twitter_post_id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \" ID: \", post.twitter_post_id), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Primary term: \", post.primary_term), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Hashtag: \", post.hashtag), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Date: \", post.tweet_date), __jsx(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })))));\n}","map":{"version":3,"sources":["C:/Users/DanLo/WebstormProjects/TrumpTwitter/pages/candidate.js"],"names":["fetch","React","Divider","Header","Candidate","getInitialProps","req","query","pageRequest","id","res","json","console","log","name","title","data","ctx","candidates_info","map","post","twitter_post_id","primary_term","hashtag","tweet_date"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEAC,SAAS,CAACC,eAAV,GAA4B,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAP,KAA0B;AAClD,QAAMC,WAAW,GAAI,GAAE,OAAQ,KAAI,gBAAiB,kBAAiBD,KAAK,CAACE,EAAG,EAA9E;AACA,QAAMC,GAAG,GAAG,MAAMV,KAAK,CAACQ,WAAD,CAAvB;AACA,QAAMG,IAAI,GAAG,MAAMD,GAAG,CAACC,IAAJ,EAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SAAO;AAACG,IAAAA,IAAI,EAAEP,KAAK,CAACQ,KAAb;AAAoBC,IAAAA,IAAI,EAAEL;AAA1B,GAAP;AACH,CAND;;AASA,eAAe,SAASP,SAAT,CAAmBa,GAAnB,EAAwB;AACnC,SACI,4BACA,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAkBA,GAAG,CAACH,IAAtB,OAFA,EAGKG,GAAG,CAACD,IAAJ,CAASE,eAAT,CAAyBC,GAAzB,CAA6BC,IAAI,IAC9B;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAASD,IAAI,CAACC,eAAd,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkBD,IAAI,CAACE,YAAvB,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaF,IAAI,CAACG,OAAlB,CAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUH,IAAI,CAACI,UAAf,CAJJ,EAKI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADH,CAHL,CADA,CADJ;AAiBH","sourcesContent":["import fetch from 'isomorphic-unfetch'\r\nimport React from \"react\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Header from \"../components/header\";\r\n\r\nCandidate.getInitialProps = async ({ req, query }) => {\r\n    const pageRequest = `${\"http:\"}//${\"localhost:3000\"}/api/tweets?id=${query.id}`;\r\n    const res = await fetch(pageRequest);\r\n    const json = await res.json();\r\n    console.log(json);\r\n    return {name: query.title, data: json}\r\n};\r\n\r\n\r\nexport default function Candidate(ctx) {\r\n    return (\r\n        <>\r\n        <Layout>\r\n        <h1> Political Tweeter Prototype V1! </h1>\r\n        <h2> Tweets from {ctx.name}  </h2>\r\n            {ctx.data.candidates_info.map(post => (\r\n                <li key={post.twitter_post_id}>\r\n                    <a> ID: {post.twitter_post_id}</a>\r\n                    <p>Primary term: {post.primary_term}</p>\r\n                    <p>Hashtag: {post.hashtag}</p>\r\n                    <p>Date: {post.tweet_date}</p>\r\n                    <Divider/>\r\n                </li>\r\n    ))}\r\n        </Layout>\r\n        </>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}