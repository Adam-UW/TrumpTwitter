{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\DanLo\\\\WebstormProjects\\\\TrumpTwitter\\\\pages\\\\candidate.js\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport React from \"react\";\n\nCandidate.getInitialProps = function _callee(_ref) {\n  var req, query, pageRequest, res, json;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = _ref.req, query = _ref.query;\n          pageRequest = \"http:\".concat(\"//\", \"localhost:3000\", \"/api/tweets?id=\", query.id);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(pageRequest));\n\n        case 4:\n          res = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 7:\n          json = _context.sent;\n          return _context.abrupt(\"return\", {\n            name: query.title,\n            data: json\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default function Candidate(ctx) {\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \" Political Tweeter Prototype V1! \"), __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \" Tweets from \", ctx.name, \"  \"), ctx.data.tweets.map(function (post) {\n    return __jsx(\"li\", {\n      key: post.twitter_post_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Primary term: \", post.twitter.primary_term), __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Hashtag: \", post.twitter.hashtag), __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Date: \", post.twitter.date));\n  }));\n}","map":{"version":3,"sources":["C:/Users/DanLo/WebstormProjects/TrumpTwitter/pages/candidate.js"],"names":["useRouter","fetch","React","Candidate","getInitialProps","req","query","pageRequest","id","res","json","name","title","data","ctx","tweets","map","post","twitter_post_id","twitter","primary_term","hashtag","date"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEAC,SAAS,CAACC,eAAV,GAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,GAAT,QAASA,GAAT,EAAcC,KAAd,QAAcA,KAAd;AAClBC,UAAAA,WADkB,GACD,OADC,cACW,gBADX,qBAC6CD,KAAK,CAACE,EADnD;AAAA;AAAA,2CAENP,KAAK,CAACM,WAAD,CAFC;;AAAA;AAElBE,UAAAA,GAFkB;AAAA;AAAA,2CAILA,GAAG,CAACC,IAAJ,EAJK;;AAAA;AAIlBA,UAAAA,IAJkB;AAAA,2CAKjB;AAACC,YAAAA,IAAI,EAAEL,KAAK,CAACM,KAAb;AAAoBC,YAAAA,IAAI,EAAEH;AAA1B,WALiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AASA,eAAe,SAASP,SAAT,CAAmBW,GAAnB,EAAwB;AACnC,SACI,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAkBA,GAAG,CAACH,IAAtB,OAFA,EAGKG,GAAG,CAACD,IAAJ,CAASE,MAAT,CAAgBC,GAAhB,CAAoB,UAAAC,IAAI;AAAA,WACrB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAkBD,IAAI,CAACE,OAAL,CAAaC,YAA/B,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaH,IAAI,CAACE,OAAL,CAAaE,OAA1B,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAUJ,IAAI,CAACE,OAAL,CAAaG,IAAvB,CAHJ,CADqB;AAAA,GAAxB,CAHL,CADJ;AAaH","sourcesContent":["import { useRouter } from 'next/router';\r\nimport fetch from 'isomorphic-unfetch'\r\nimport React from \"react\";\r\n\r\nCandidate.getInitialProps = async ({ req, query }) => {\r\n    const pageRequest = `${\"http:\"}//${\"localhost:3000\"}/api/tweets?id=${query.id}`;\r\n    const res = await fetch(pageRequest)\r\n    //console.log(res);\r\n    const json = await res.json()\r\n    return {name: query.title, data: json}\r\n};\r\n\r\n\r\nexport default function Candidate(ctx) {\r\n    return (\r\n        <>\r\n        <h1> Political Tweeter Prototype V1! </h1>\r\n        <h2> Tweets from {ctx.name}  </h2>\r\n            {ctx.data.tweets.map(post => (\r\n                <li key={post.twitter_post_id}>\r\n                    <a>Primary term: {post.twitter.primary_term}</a>\r\n                    <a>Hashtag: {post.twitter.hashtag}</a>\r\n                    <a>Date: {post.twitter.date}</a>\r\n                </li>\r\n    ))}\r\n        </>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}