{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DanLo\\\\WebstormProjects\\\\TrumpTwitter\\\\pages\\\\candidate.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport React from \"react\";\n\nCandidate.getInitialProps = async ({\n  req,\n  query\n}) => {\n  const pageRequest = `${\"http:\"}//${\"localhost:3000\"}/api/tweets?id=${query.id}`;\n  const res = await fetch(pageRequest);\n  const json = await res.json();\n  console.log(json);\n  return {\n    name: query.title,\n    data: json\n  };\n};\n\nexport default function Candidate(ctx) {\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \" Political Tweeter Prototype V1! \"), __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \" Tweets from \", ctx.name, \"  \"), ctx.data.candidates_info.map(post => __jsx(\"li\", {\n    key: post.twitter_post_id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Primary term: \", post.primary_term, \"\\n\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Hashtag: \", post.hashtag), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Date: \", post.tweet_date))));\n}\n\nconst Hbar = () => __jsx(React.Fragment, null, __jsx(_JSXStyle, {\n  id: \"1144030242\",\n  __self: this\n}, \".jsx-1144030242{borderBottomColor:'black', borderBottomWidth:1;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcRGFuTG9cXFdlYnN0b3JtUHJvamVjdHNcXFRydW1wVHdpdHRlclxccGFnZXNcXGNhbmRpZGF0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4QmdCLEFBRXFCLCtDQUFDIiwiZmlsZSI6IkM6XFxVc2Vyc1xcRGFuTG9cXFdlYnN0b3JtUHJvamVjdHNcXFRydW1wVHdpdHRlclxccGFnZXNcXGNhbmRpZGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvcm91dGVyJztcclxuaW1wb3J0IGZldGNoIGZyb20gJ2lzb21vcnBoaWMtdW5mZXRjaCdcclxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuQ2FuZGlkYXRlLmdldEluaXRpYWxQcm9wcyA9IGFzeW5jICh7IHJlcSwgcXVlcnkgfSkgPT4ge1xyXG4gICAgY29uc3QgcGFnZVJlcXVlc3QgPSBgJHtcImh0dHA6XCJ9Ly8ke1wibG9jYWxob3N0OjMwMDBcIn0vYXBpL3R3ZWV0cz9pZD0ke3F1ZXJ5LmlkfWA7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChwYWdlUmVxdWVzdCk7XHJcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcclxuICAgIGNvbnNvbGUubG9nKGpzb24pO1xyXG4gICAgcmV0dXJuIHtuYW1lOiBxdWVyeS50aXRsZSwgZGF0YToganNvbn1cclxufTtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDYW5kaWRhdGUoY3R4KSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgPGgxPiBQb2xpdGljYWwgVHdlZXRlciBQcm90b3R5cGUgVjEhIDwvaDE+XHJcbiAgICAgICAgPGgyPiBUd2VldHMgZnJvbSB7Y3R4Lm5hbWV9ICA8L2gyPlxyXG4gICAgICAgICAgICB7Y3R4LmRhdGEuY2FuZGlkYXRlc19pbmZvLm1hcChwb3N0ID0+IChcclxuICAgICAgICAgICAgICAgIDxsaSBrZXk9e3Bvc3QudHdpdHRlcl9wb3N0X2lkfT5cclxuICAgICAgICAgICAgICAgICAgICA8YT5QcmltYXJ5IHRlcm06IHtwb3N0LnByaW1hcnlfdGVybX17XCJcXG5cIn08L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+SGFzaHRhZzoge3Bvc3QuaGFzaHRhZ308L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+RGF0ZToge3Bvc3QudHdlZXRfZGF0ZX08L3A+XHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgKSl9XHJcbiAgICAgICAgPC8+XHJcbiAgICApO1xyXG59XHJcbmNvbnN0IEhiYXIgPSAoKSA9PiAoXHJcbiAgICA8PlxyXG4gICAgPHN0eWxlIGpzeD57XCJib3JkZXJCb3R0b21Db2xvcjogXFwnYmxhY2tcXCcsXFxuIGJvcmRlckJvdHRvbVdpZHRoOiAxXCJ9PC9zdHlsZT5cclxuICAgIDwvPlxyXG4pIl19 */\\n/*@ sourceURL=C:\\\\\\\\Users\\\\\\\\DanLo\\\\\\\\WebstormProjects\\\\\\\\TrumpTwitter\\\\\\\\pages\\\\\\\\candidate.js */\"));","map":{"version":3,"sources":["C:/Users/DanLo/WebstormProjects/TrumpTwitter/pages/candidate.js"],"names":["useRouter","fetch","React","Candidate","getInitialProps","req","query","pageRequest","id","res","json","console","log","name","title","data","ctx","candidates_info","map","post","twitter_post_id","primary_term","hashtag","tweet_date","Hbar"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEAC,SAAS,CAACC,eAAV,GAA4B,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAP,KAA0B;AAClD,QAAMC,WAAW,GAAI,GAAE,OAAQ,KAAI,gBAAiB,kBAAiBD,KAAK,CAACE,EAAG,EAA9E;AACA,QAAMC,GAAG,GAAG,MAAMR,KAAK,CAACM,WAAD,CAAvB;AACA,QAAMG,IAAI,GAAG,MAAMD,GAAG,CAACC,IAAJ,EAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SAAO;AAACG,IAAAA,IAAI,EAAEP,KAAK,CAACQ,KAAb;AAAoBC,IAAAA,IAAI,EAAEL;AAA1B,GAAP;AACH,CAND;;AASA,eAAe,SAASP,SAAT,CAAmBa,GAAnB,EAAwB;AACnC,SACI,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAkBA,GAAG,CAACH,IAAtB,OAFA,EAGKG,GAAG,CAACD,IAAJ,CAASE,eAAT,CAAyBC,GAAzB,CAA6BC,IAAI,IAC9B;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkBD,IAAI,CAACE,YAAvB,EAAqC,IAArC,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaF,IAAI,CAACG,OAAlB,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUH,IAAI,CAACI,UAAf,CAHJ,CADH,CAHL,CADJ;AAaH;;AACD,MAAMC,IAAI,GAAG,MACT;AAAA;AAAA;AAAA,g/DADJ","sourcesContent":["import { useRouter } from 'next/router';\r\nimport fetch from 'isomorphic-unfetch'\r\nimport React from \"react\";\r\n\r\nCandidate.getInitialProps = async ({ req, query }) => {\r\n    const pageRequest = `${\"http:\"}//${\"localhost:3000\"}/api/tweets?id=${query.id}`;\r\n    const res = await fetch(pageRequest);\r\n    const json = await res.json();\r\n    console.log(json);\r\n    return {name: query.title, data: json}\r\n};\r\n\r\n\r\nexport default function Candidate(ctx) {\r\n    return (\r\n        <>\r\n        <h1> Political Tweeter Prototype V1! </h1>\r\n        <h2> Tweets from {ctx.name}  </h2>\r\n            {ctx.data.candidates_info.map(post => (\r\n                <li key={post.twitter_post_id}>\r\n                    <a>Primary term: {post.primary_term}{\"\\n\"}</a>\r\n                    <p>Hashtag: {post.hashtag}</p>\r\n                    <p>Date: {post.tweet_date}</p>\r\n                </li>\r\n    ))}\r\n        </>\r\n    );\r\n}\r\nconst Hbar = () => (\r\n    <>\r\n    <style jsx>{\"borderBottomColor: \\'black\\',\\n borderBottomWidth: 1\"}</style>\r\n    </>\r\n)"]},"metadata":{},"sourceType":"module"}